generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // for local development
  url      = env("DATABASE_URL")
  // for Vercel

  //url       = env("POSTGRES_PRISMA_URL")
  //directUrl = env("POSTGRES_URL_NON_POOLING")
}


model User {
  id                   Int         @id @default(autoincrement())
  email                String      @unique
  password             String
  role                 Role        @default(USER)
  firstName            String      @default("John")
  lastName             String      @default("Doe")
  approvedHours        Float       @default(0)
  pendingHours         Float       @default(0)
  billingNotifications Boolean     @default(false)
  emailNotifications   Boolean     @default(false)
  reminders            Boolean     @default(false)
  phone                String?
  billings             Billing[]
  events               UserEvent[] // Connects users to the events they sign up for
  hoursLogs            HoursLog[] // Added opposite relation field
  cardNumber           String? // Card number for payment details
  cardExpiry           String? // Expiry date for payment details (format: MM/YY)
  cardCVV              String? // CVV for payment details
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  status               String     @default("pending") // Add this field if required
}

model Event {
  id          Int    @id @default(autoincrement())
  title       String
  description String
  date        String
  location    String
  hours       Float
  time        String
  status      String @default("pending")
  qr          String //field to store qr data
  users       UserEvent[]  // Connects events to the users signed up for them
}

model UserEvent {
  id        Int     @id @default(autoincrement())
  userId    Int
  eventId   Int
  User      User    @relation(fields: [userId], references: [id])
  Event     Event   @relation(fields: [eventId], references: [id])

  // Ensure a user can't sign up for the same event twice
  @@unique([userId, eventId])
}

model Stuff {
  id        Int       @id @default(autoincrement())
  name      String
  quantity  Int
  condition Condition
  owner     String
}

model Billing {
  id          Int      @id @default(autoincrement())
  userId      Int
  amount      Float
  description String
  createdAt   DateTime @default(now())
  User        User     @relation(fields: [userId], references: [id])
}

model HoursLog {
  id          Int      @id @default(autoincrement())
  userId      Int
  action      String
  hours       Float
  performedBy String
  createdAt   DateTime @default(now())
  User        User     @relation(fields: [userId], references: [id])
}

model Qr {
  id          Int      @id @default(autoincrement())
  data        String
  createdAt   DateTime @default(now())
}

enum Role {
  USER
  ADMIN
}

enum Condition {
  excellent
  good
  fair
  poor
}
